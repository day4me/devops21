# This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD.
# It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD.
#
# `sloth generate -i ./examples/k8s-getting-started.yml`
#
apiVersion: sloth.slok.dev/v1
kind: PrometheusServiceLevel
metadata:
  annotations:
    meta.helm.sh/release-name: <your helm install name> # change this to your name of helm install
    meta.helm.sh/release-namespace: monitoring
    prometheus-operator-validated: "true"
  generation: 1
  labels:
    app: kube-prometheus-stack
    app.kubernetes.io/instance: <your helm install name> # change this to your name of helm install 
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kube-prometheus-stack
    app.kubernetes.io/version: 19.2.3
    chart: kube-prometheus-stack-19.2.3
    heritage: Helm
    release: <your helm install name> # change this to your name of helm install you chose earlyier
  name: sloth-slo-my-service # name of slo
  namespace: monitoring
spec:
  service: "myservice" # you can change it and choose any name 
  slos:
    - name: "requests-availability"
      objective: 99.9
      description: "Common SLO based on availability for HTTP request responses."
      sli:
        events:
          errorQuery: sum(rate(http_request_duration_seconds_count{job="myservice",code=~"(5..|429)"}[{{.window}}]))
          totalQuery: sum(rate(http_request_duration_seconds_count{job="myservice"}[{{.window}}]))
      alerting:
        name: MyServiceHighErrorRate
        labels:
          category: "availability"
        annotations:
          summary: "High error rate on 'myservice' requests responses"
        pageAlert:
          labels:
            severity: pageteam
            routing_key: myteam
        ticketAlert:
          labels:
            severity: "slack"
            slack_channel: "#alerts-myteam"